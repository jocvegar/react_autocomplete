{"version":3,"sources":["Autocomplete.js","App.js","serviceWorker.js","index.js"],"names":["Autocomplete","state","activeOption","filteredOptions","showOptions","userInput","onChange","e","options","_this","props","currentTarget","value","filter","option","toLowerCase","indexOf","setState","onClick","innerText","onKeyDown","_this$state","keyCode","length","optionList","this","_this$state2","react_default","a","createElement","className","map","optionName","index","key","Fragment","type","placeholder","Component","App","src_Autocomplete","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAmHeA,6MA3GdC,MAAQ,CACPC,aAAc,EACdC,gBAAiB,GACjBC,aAAa,EACbC,UAAW,MAGZC,SAAW,SAACC,GAAM,IACTC,EAAYC,EAAKC,MAAjBF,QACFH,EAAYE,EAAEI,cAAcC,MAC5BT,EAAkBK,EAAQK,OAAO,SAACC,GAAD,OACtCA,EAAOC,cAAcC,QAAQX,EAAUU,gBAAkB,IAG1DN,EAAKQ,SAAS,CACbf,aAAc,EACdC,kBACAC,aAAa,EACbC,UAAWE,EAAEI,cAAcC,WAI7BM,QAAU,SAACX,GACVE,EAAKQ,SAAS,CACbf,aAAc,EACdC,gBAAiB,GACjBC,aAAa,EACbC,UAAWE,EAAEI,cAAcQ,eAI7BC,UAAY,SAACb,GAAM,IAAAc,EACwBZ,EAAKR,MAAvCC,EADUmB,EACVnB,aAAcC,EADJkB,EACIlB,gBAEtB,GAAkB,KAAdI,EAAEe,QACLb,EAAKQ,SAAS,CACbf,aAAc,EACdE,aAAa,EACbC,UAAWF,EAAgBD,UAEtB,GAAkB,KAAdK,EAAEe,QAAgB,CAC5B,GAAqB,IAAjBpB,EACH,OAEDO,EAAKQ,SAAS,CAAEf,aAAcA,EAAe,SACvC,GAAkB,KAAdK,EAAEe,QAAgB,CAC5B,GAAIpB,IAAiBC,EAAgBoB,OAAS,EAC7C,OAEDd,EAAKQ,SAAS,CAAEf,aAAcA,EAAe,8EAIrC,IAQLsB,EANHlB,EAIGmB,KAJHnB,SACAY,EAGGO,KAHHP,QACAE,EAEGK,KAFHL,UAJQM,EAMLD,KADHxB,MAASC,EALDwB,EAKCxB,aAAcC,EALfuB,EAKevB,gBAAiBC,EALhCsB,EAKgCtB,YAAaC,EAL7CqB,EAK6CrB,UA+BtD,OA1BID,GAAeC,IAEjBmB,EADGrB,EAAgBoB,OAElBI,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WACZ3B,EAAgB4B,IAAI,SAACC,EAAYC,GACjC,IAAIH,EAIJ,OAHIG,IAAU/B,IACb4B,EAAY,iBAGZH,EAAAC,EAAAC,cAAA,MAAIC,UAAWA,EAAWI,IAAKF,EAAYd,QAASA,GAClDc,MAQLL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACdH,EAAAC,EAAAC,cAAA,0BAOHF,EAAAC,EAAAC,cAACF,EAAAC,EAAMO,SAAP,KACCR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACdH,EAAAC,EAAAC,cAAA,SACCO,KAAK,OACLN,UAAU,aACVxB,SAAUA,EACVc,UAAWA,EACXR,MAAOP,EACPgC,YAAY,uBACbV,EAAAC,EAAAC,cAAA,SAAOO,KAAK,SAASxB,MAAM,GAAGkB,UAAU,gBAExCN,UA1GsBc,aC6DZC,EA7DH,WACR,OACIZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAACW,EAAD,CACIhC,QAAS,CACL,OACA,OACA,WACA,OACA,QACA,UACA,UACA,MACA,MACA,OACA,SACA,aACA,QACA,OACA,OACA,MACA,OACA,MACA,MACA,QACA,QACA,SACA,KACA,QACA,SACA,OACA,SACA,QACA,QACA,UACA,UACA,WACA,QACA,OACA,SACA,QACA,QACA,UACA,QACA,SACA,QACA,OACA,QACA,MACA,OACA,QACA,OACA,OACA,QACA,YC7CAiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e21d7147.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Autocomplete extends Component {\n\tstatic propTypes = {\n\t\toptions: PropTypes.instanceOf(Array).isRequired\n\t};\n\n\tstate = {\n\t\tactiveOption: 0,\n\t\tfilteredOptions: [],\n\t\tshowOptions: false,\n\t\tuserInput: '',\n\t}\n\n\tonChange = (e) => {\n\t\tconst { options } = this.props;\n\t\tconst userInput = e.currentTarget.value;\n\t\tconst filteredOptions = options.filter((option) =>\n\t\t\toption.toLowerCase().indexOf(userInput.toLowerCase()) > -1\n\t\t);\n\n\t\tthis.setState({\n\t\t\tactiveOption: 0,\n\t\t\tfilteredOptions,\n\t\t\tshowOptions: true,\n\t\t\tuserInput: e.currentTarget.value,\n\t\t});\n\t}\n\n\tonClick = (e) => {\n\t\tthis.setState({\n\t\t\tactiveOption: 0,\n\t\t\tfilteredOptions: [],\n\t\t\tshowOptions: false,\n\t\t\tuserInput: e.currentTarget.innerText,\n\t\t});\n\t}\n\n\tonKeyDown = (e) => {\n\t\tconst { activeOption, filteredOptions } = this.state;\n\n\t\tif (e.keyCode === 13) {\n\t\t\tthis.setState({\n\t\t\t\tactiveOption: 0,\n\t\t\t\tshowOptions: false,\n\t\t\t\tuserInput: filteredOptions[activeOption]\n\t\t\t});\n\t\t} else if (e.keyCode === 38) {\n\t\t\tif (activeOption === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.setState({ activeOption: activeOption - 1 });\n\t\t} else if (e.keyCode === 40) {\n\t\t\tif (activeOption === filteredOptions.length - 1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.setState({ activeOption: activeOption + 1 });\n\t\t}\n\t}\n\n\trender () {\n\t\tconst {\n\t\t\tonChange,\n\t\t\tonClick,\n\t\t\tonKeyDown,\n\t\t\tstate: { activeOption, filteredOptions, showOptions, userInput }\n\t\t} = this;\n\n\t\tlet optionList;\n\n\t\tif (showOptions && userInput) {\n\t\t\tif (filteredOptions.length) {\n\t\t\t\toptionList = (\n\t\t\t\t\t<ul className=\"options\">\n\t\t\t\t\t\t{filteredOptions.map((optionName, index) => {\n\t\t\t\t\t\t\tlet className;\n\t\t\t\t\t\t\tif (index === activeOption) {\n\t\t\t\t\t\t\t\tclassName = \"option-active\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<li className={className} key={optionName} onClick={onClick}>\n\t\t\t\t\t\t\t\t\t{optionName}\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</ul>\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\toptionList = (\n\t\t\t\t\t<div className=\"no-options\">\n\t\t\t\t\t\t<em>No Option!</em>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<div className=\"search\">\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tclassName=\"search-box\"\n\t\t\t\t\t\tonChange={onChange}\n\t\t\t\t\t\tonKeyDown={onKeyDown}\n\t\t\t\t\t\tvalue={userInput}\n\t\t\t\t\t\tplaceholder=\"Seach common nouns\" />\n\t\t\t\t\t<input type=\"submit\" value=\"\" className=\"search-btn\" />\n\t\t\t\t</div>\n\t\t\t\t{optionList}\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nexport default Autocomplete;\n","import React from 'react';\nimport Autocomplete from './Autocomplete';\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <Autocomplete\n                options={[\n                    \"area\",\n                    \"book\",\n                    \"business\",\n                    \"case\",\n                    \"child\",\n                    \"company\",\n                    \"country\",\n                    \"day\",\n                    \"eye\",\n                    \"fact\",\n                    \"family\",\n                    \"government\",\n                    \"group\",\n                    \"hand\",\n                    \"home\",\n                    \"job\",\n                    \"life\",\n                    \"lot\",\n                    \"man\",\n                    \"money\",\n                    \"month\",\n                    \"mother\",\n                    \"Mr\",\n                    \"night\",\n                    \"number\",\n                    \"part\",\n                    \"people\",\n                    \"place\",\n                    \"point\",\n                    \"problem\",\n                    \"program\",\n                    \"question\",\n                    \"right\",\n                    \"room\",\n                    \"school\",\n                    \"state\",\n                    \"story\",\n                    \"student\",\n                    \"study\",\n                    \"system\",\n                    \"thing\",\n                    \"time\",\n                    \"water\",\n                    \"way\",\n                    \"week\",\n                    \"woman\",\n                    \"word\",\n                    \"work\",\n                    \"world\",\n                    \"year\"\n                ]}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}